// Generated by CoffeeScript 1.6.3
/*
@author Your Name <email@example.com>
@license LICENSE
*/

var define;

define = (function(root) {
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    if (typeof module === 'object' && module.exports) {
      return function(factory) {
        return module.exports = factory();
      };
    } else {
      return function(factory) {
        return root.TzTime = factory();
      };
    }
  }
})(this);

define(function(require) {
  var TzTime;
  TzTime = (function() {
    var D, METHODS, NON_TZ_AWARE_GETTERS, NON_TZ_AWARE_SETTERS, TZ_AWARE_METHODS, m, property, staticProperty, wrap, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref;

    property = function(name, descriptor) {
      return Object.defineProperty(TzTime.prototype, name, descriptor);
    };

    staticProperty = function(name, descriptor) {
      return Object.defineProperty(TzTime, name, descriptor);
    };

    wrap = function(name) {
      return TzTime.prototype[name] = function() {
        var _ref;
        return (_ref = this.__datetime__)[name].apply(_ref, arguments);
      };
    };

    METHODS = ['FullYear', 'Month', 'Date', 'Day', 'Hours', 'Minutes', 'Seconds', 'Milliseconds'];

    TZ_AWARE_METHODS = ['FullYear', 'Month', 'Date', 'Day', 'Hours', 'Minutes'];

    NON_TZ_AWARE_GETTERS = ['Seconds', 'Milliseconds'];

    NON_TZ_AWARE_SETTERS = ['Minutes', 'Seconds', 'Milliseconds'];

    function TzTime(yr, mo, dy, hr, mi, se, ms, tz) {
      var instance, t;
      if (hr == null) {
        hr = 0;
      }
      if (mi == null) {
        mi = 0;
      }
      if (se == null) {
        se = 0;
      }
      if (ms == null) {
        ms = 0;
      }
      if (tz == null) {
        tz = null;
      }
      if (!(this instanceof TzTime)) {
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(TzTime, arguments, function(){});
      }
      switch (arguments.length) {
        case 0:
          instance = new Date();
          break;
        case 1:
          if (yr instanceof TzTime) {
            instance = new Date(yr.getTime());
            this.__tz__ = yr.timezone;
          } else if (yr instanceof Date) {
            instance = new Date(yr.getTime());
          } else {
            instance = new Date(yr);
          }
          break;
        case 2:
          throw new Error("Not implemented yet");
          break;
        case 8:
          t = Date.UTC(yr, mo, dy, hr, mi, se, ms);
          t -= tz * 60 * 1000;
          instance = new Date(t);
          this.__tz__ = tz;
          break;
        default:
          instance = new Date(yr, mo, dy, hr, mi, se, ms);
      }
      this.__tz__ || (this.__tz__ = -instance.getTimezoneOffset());
      this.__datetime__ = instance;
      this.constructor = TzTime;
    }

    D = function() {};

    D.prototype = Date.prototype;

    TzTime.prototype = new D();

    property('timezone', {
      get: function() {
        return -this.getTimezoneOffset();
      },
      set: function(v) {
        return this.setTimezoneOffset(-v);
      }
    });

    property('year', {
      get: function() {
        return this.getFullYear();
      },
      set: function(v) {
        return this.setFullYear(v);
      }
    });

    property('month', {
      get: function() {
        return this.getMonth();
      },
      set: function(v) {
        return this.setMonth(v);
      }
    });

    property('date', {
      get: function() {
        return this.getDate();
      },
      set: function(v) {
        return this.setDate(v);
      }
    });

    property('day', {
      get: function() {
        return this.getDay();
      },
      set: function() {
        throw new TypeError("Cannot assign to day");
      }
    });

    property('hours', {
      get: function() {
        return this.getHours();
      },
      set: function(v) {
        return this.setHours(v);
      }
    });

    property('minutes', {
      get: function() {
        return this.getMinutes();
      },
      set: function(v) {
        return this.setMinutes(v);
      }
    });

    property('seconds', {
      get: function() {
        return this.getSeconds();
      },
      set: function(v) {
        return this.setSeconds(v);
      }
    });

    property('milliseconds', {
      get: function() {
        return this.getMilliseconds();
      },
      set: function(v) {
        return this.setMilliseconds(v);
      }
    });

    property('utcYear', {
      get: function() {
        return this.getUTCFullYear();
      },
      set: function(v) {
        return this.setUTCFullYear(v);
      }
    });

    property('utcMonth', {
      get: function() {
        return this.getUTCMonth();
      },
      set: function(v) {
        return this.setUTCMonth(v);
      }
    });

    property('utcDate', {
      get: function() {
        return this.getUTCDate();
      },
      set: function(v) {
        return this.setUTCDate(v);
      }
    });

    property('utcDay', {
      get: function() {
        return this.getUTCDay();
      },
      set: function() {
        throw new TypeError("Cannot assign to utcDay");
      }
    });

    property('utcHours', {
      get: function() {
        return this.getUTCHours();
      },
      set: function(v) {
        return this.setUTCHours(v);
      }
    });

    property('utcMinutes', {
      get: function() {
        return this.getUTCMinutes();
      },
      set: function(v) {
        return this.setUTCMinutes(v);
      }
    });

    property('utcSeconds', {
      get: function() {
        return this.getUTCSeconds();
      },
      set: function(v) {
        return this.setUTCSeconds(v);
      }
    });

    property('utcMilliseconds', {
      get: function() {
        return this.getUTCMilliseconds();
      },
      set: function(v) {
        return this.setUTCMilliseconds(v);
      }
    });

    TzTime.prototype.getTimezoneOffset = function() {
      return -this.__tz__;
    };

    TzTime.prototype.setTimezoneOffset = function(v) {
      var delta;
      v = parseInt(v);
      if (isNaN(v)) {
        throw new TypeError("Time zone offset must be an integer.");
      }
      if ((-720 > v && v > 720)) {
        throw new TypeError("Time zone offset out of bounds.");
      }
      v = -v;
      delta = v - this.__tz__;
      this.__tz__ = v;
      this.setUTCMinutes(this.getUTCMinutes() - delta);
      return this;
    };

    _ref = ['toDateString', 'toISOString', 'toJSON', 'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString', 'toString', 'toTimeString', 'toUTCString', 'valueOf', 'getTime', 'setTime'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      wrap(m);
    }

    if (m !== 'Day') {
      for (_j = 0, _len1 = METHODS.length; _j < _len1; _j++) {
        m = METHODS[_j];
        wrap('setUTC' + m);
      }
    }

    for (_k = 0, _len2 = METHODS.length; _k < _len2; _k++) {
      m = METHODS[_k];
      wrap('getUTC' + m);
    }

    for (_l = 0, _len3 = NON_TZ_AWARE_GETTERS.length; _l < _len3; _l++) {
      m = NON_TZ_AWARE_GETTERS[_l];
      wrap('get' + m);
    }

    for (_m = 0, _len4 = NON_TZ_AWARE_SETTERS.length; _m < _len4; _m++) {
      m = NON_TZ_AWARE_SETTERS[_m];
      wrap('set' + m);
    }

    (function(proto) {
      var method, _len5, _n;
      for (_n = 0, _len5 = TZ_AWARE_METHODS.length; _n < _len5; _n++) {
        method = TZ_AWARE_METHODS[_n];
        if (!(method === 'Day' || method === 'Minutes')) {
          proto['set' + method] = (function(method) {
            return function() {
              var delta, time;
              this['setUTC' + method].apply(this, arguments);
              time = this.getTime();
              delta = time - this.timezone * 60 * 1000;
              this.setTime(delta);
              return this;
            };
          })(method);
        }
        proto['get' + method] = (function(method) {
          return function() {
            var d;
            d = new Date(this.getTime() + this.timezone * 60 * 1000);
            return d['getUTC' + method]();
          };
        })(method);
      }
    })(TzTime.prototype);

    staticProperty('platformZone', {
      get: function() {
        return -(new Date().getTimezoneOffset());
      },
      set: function() {
        throw new TypeError("Cannot assign to platformZone");
      }
    });

    return TzTime;

  })();
  TzTime.utils = {
    repeat: function(s, count) {
      return new Array(count + 1).join(s);
    },
    reverse: function(s) {
      return s.split('').reverse().join('');
    },
    pad: function(i, digits, tail) {
      var h, t, _ref;
      if (digits == null) {
        digits = 3;
      }
      if (tail == null) {
        tail = false;
      }
      if (tail === false) {
        return (TzTime.utils.repeat('0', digits) + i).slice(-digits);
      } else {
        _ref = i.toString().split('.'), h = _ref[0], t = _ref[1];
        if (tail === 0) {
          return TzTime.utils.pad(h, digits, false);
        } else {
          t || (t = '0');
          h = TzTime.utils.pad(h, digits, false);
          t = TzTime.utils.pad(TzTime.utils.reverse(t), tail, false);
          t = TzTime.utils.reverse(t);
          return [h, t].join('.');
        }
      }
    },
    cycle: function(i, max, zeroIndex) {
      if (zeroIndex == null) {
        zeroIndex = false;
      }
      return i % max || (zeroIndex ? 0 : max);
    },
    hour24: function(h, pm) {
      if (pm == null) {
        pm = false;
      }
      h += (pm ? 12 : 0);
      if (h === 12) {
        return 0;
      }
      if (h === 24) {
        return 12;
      }
      return h;
    }
  };
  return TzTime;
});
