// Generated by CoffeeScript 1.6.3
/*
@author Your Name <email@example.com>
@license LICENSE
*/

var define;

define = (function(root) {
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    if (typeof module === 'object' && module.exports) {
      return function(factory) {
        return module.exports = factory();
      };
    } else {
      return function(factory) {
        return root.TzTime = factory();
      };
    }
  }
})(this);

define(function(require) {
  var TzTime;
  return TzTime = (function() {
    var D, property;

    property = function(name, descriptor) {
      return Object.defineProperty(TzTime.prototype, name, descriptor);
    };

    function TzTime(yr, mo, dy, hr, mi, se, ms) {
      var instance;
      if (hr == null) {
        hr = 0;
      }
      if (mi == null) {
        mi = 0;
      }
      if (se == null) {
        se = 0;
      }
      if (ms == null) {
        ms = 0;
      }
      switch (arguments.length) {
        case 0:
          instance = new Date();
          break;
        case 1:
          instance = new Date(yr);
          break;
        case 2:
          throw new Error("Not implemented yet");
          break;
        default:
          instance = new Date(yr, mo, dy, hr, mi, se, ms);
      }
      instance.__timezone__ = -instance.getTimezoneOffset();
      instance.constructor = TzTime;
      instance.__proto__ = TzTime.prototype;
      return instance;
    }

    D = function() {};

    D.prototype = Date.prototype;

    TzTime.prototype = new D();

    property('timezone', {
      get: function() {
        return -this.getTimezoneOffset();
      },
      set: function(v) {
        return this.setTimezoneOffset(-v);
      }
    });

    property('year', {
      get: function() {
        return this.getFullYear();
      },
      set: function(v) {
        return this.setFullYear(v);
      }
    });

    property('month', {
      get: function() {
        return this.getMonth();
      },
      set: function(v) {
        return this.setMonth(v);
      }
    });

    property('date', {
      get: function() {
        return this.getDate();
      },
      set: function(v) {
        return this.setDate(v);
      }
    });

    property('hours', {
      get: function() {
        return this.getHours();
      },
      set: function(v) {
        return this.setHours(v);
      }
    });

    property('minutes', {
      get: function() {
        return this.getMinutes();
      },
      set: function(v) {
        return this.setMinutes(v);
      }
    });

    property('seconds', {
      get: function() {
        return this.getSeconds();
      },
      set: function(v) {
        return this.setSeconds(v);
      }
    });

    TzTime.prototype.getTimezoneOffset = function() {
      return -this.__timezone__;
    };

    TzTime.prototype.setTimezoneOffset = function(v) {
      v = parseInt(v);
      if (isNaN(v)) {
        throw new TypeError("Time zone offset must be an integer.");
      }
      if ((-720 > v && v > 720)) {
        throw new TypeError("Time zone offset out of bounds.");
      }
      return this.__timezone__ = -v;
    };

    (function(proto) {
      var method, methods, _i, _len, _results;
      methods = ['FullYear', 'Month', 'Date', 'Hours', 'Minutes', 'Seconds', 'Milliseconds'];
      _results = [];
      for (_i = 0, _len = methods.length; _i < _len; _i++) {
        method = methods[_i];
        if (method !== 'Hours') {
          proto['set' + method] = (function(method) {
            return function() {
              Date.prototype['setUTC' + method].apply(this, arguments);
              return this;
            };
          })(method);
        }
        _results.push(proto['get' + method] = (function(method) {
          return function() {
            var d;
            d = new Date(this.getTime());
            d.setUTCMinutes(d.getUTCMinutes() + this.__timezone__);
            return d['getUTC' + method]();
          };
        })(method));
      }
      return _results;
    })(TzTime.prototype);

    TzTime.prototype.setHours = function() {
      var delta, utcmins;
      Date.prototype.setUTCHours.apply(this, arguments);
      utcmins = Date.prototype.getUTCMinutes.call(this);
      delta = utcmins - this.__timezone__;
      Date.prototype.setUTCMinutes.call(this, delta);
      return this;
    };

    return TzTime;

  })();
});
