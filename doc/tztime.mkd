# <a name="tztime">TzTime</a>

This is a drop-in replacement for JavaScript's native Date constructor which
adds many useful and arguably saner API enhancements, and makes it
time-zone-aware.

 + [`TzTime`](#tztime)
 + [Private properties](#private-properties)
   - [`#__tz__`](#tz)
   - [`#__datetime__`](#datetime)
 + [Attributes](#attributes)
   - [`#timezone`](#timezone)
   - [`#year`](#year)
   - [`#month`](#month)
   - [`#date`](#date)
   - [`#day`](#day)
   - [`#hours`](#hours)
   - [`#minutes`](#minutes)
   - [`#seconds`](#seconds)
   - [`#milliseconds`](#milliseconds)
   - [`#utcYear`](#utcyear)
   - [`#utcMonth`](#utcmonth)
   - [`#utcDate`](#utcdate)
   - [`#utcDay`](#utcday)
   - [`#utcHours`](#utchours)
   - [`#utcMinutes`](#utcminutes)
   - [`#utcSeconds`](#utcseconds)
   - [`#utcMilliseconds`](#utcmilliseconds)
 + [Methods](#methods)
   - [`#getTimezoneOffset()`](#gettimezoneoffset)
   - [`#setTimezoneOffset(v)`](#settimezoneoffset-v)
   - [`#getFullYear()`](#getfullyear)
   - [`#getMonth()`](#getmonth)
   - [`#getDate()`](#getdate)
   - [`#getDay()`](#getday)
   - [`#getHours()`](#gethours)
   - [`#getMinutes()`](#getminutes)
   - [`#getSeconds()`](#getseconds)
   - [`#getMilliseconds()`](#getmilliseconds)
   - [`#setFullYear(year [, month, date])`](#setfullyear-year-month-date)
   - [`#setMonth(month [, date])`](#setmonth-month-date)
   - [`#setDate(date)`](#setdate-date)
   - [`#setHours(hours [, minutes, seconds, milliseconds])`](#sethours-hours-minutes-seconds-milliseconds)
   - [`#setMinutes(minutes [, seconds, milliseconds])`](#setminutes-minutes-seconds-milliseconds)
   - [`#setSeconds(seconds [, milliseconds])`](#setseconds-seconds-milliseconds)
   - [`#setMilliseconds(milliseconds)`](#setmilliseconds-milliseconds)
   - [`#getUTCFullYear()`](#getutcfullyear)
   - [`#getUTCMonth()`](#getutcmonth)
   - [`#getUTCDate()`](#getutcdate)
   - [`#getUTCDay()`](#getutcday)
   - [`#getUTCHours()`](#getutchours)
   - [`#getUTCMinutes()`](#getutcminutes)
   - [`#getUTCSeconds()`](#getutcseconds)
   - [`#getUTCMilliseconds()`](#getutcmilliseconds)
   - [`#setUTCFullYear(year [, month, date])`](#setutcfullyear-year-month-date)
   - [`#setUTCMonth(month [, date])`](#setutcmonth-month-date)
   - [`#setUTCDate(date)`](#setutcdate-date)
   - [`#setUTCHours(hours [, minutes, seconds, milliseconds])`](#setutchours-hours-minutes-seconds-milliseconds)
   - [`#setUTCMinutes(minutes [, seconds, milliseconds])`](#setutcminutes-minutes-seconds-milliseconds)
   - [`#setUTCSeconds(seconds [, milliseconds])`](#setutcseconds-seconds-milliseconds)
   - [`#setUTCMilliseconds(milliseconds)`](#setutcmilliseconds-milliseconds)
   - [`#toDateString()`](#todatestring)
   - [`#toISOString()`](#toisostring)
   - [`#toJSON()`](#tojson)
   - [`#toLocaleDateString()`](#tolocaledatestring)
   - [`#toLocaleString()`](#tolocalestring)
   - [`#toLocaleTimeString()`](#tolocaletimestring)
   - [`#toString()`](#tostring)
   - [`#toTimeString()`](#totimestring)
   - [`#toUTCString()`](#toutcstring)
   - [`#valueOf()`](#valueof)
   - [`#getTime()`](#gettime)
   - [`#setTime(milliseconds)`](#settime-milliseconds)
   - [`#toFormat([format])`](#toformat-format)
   - [`#strftime([format])`](#strftime-format)
   - [`#resetTime()`](#resettime)
   - [`#isAfter(t)`](#isafter-t)
   - [`#isBefore(t)`](#isbefore-t)
   - [`#isBetween(t1, t2)`](#isbetween-t1-t2)
   - [`#isDateAfter(t)`](#isdateafter-t)
   - [`#isDateBefore(t)`](#isdatebefore-t)
   - [`#isDateBetween(t1, t2)`](#isdatebetween-t1-t2)
   - [`#delta(t)`](#delta-t)
 + [Static properties](#static-properties)
   - [`TzTime.platformZone`](#tztime-platformzone)
 + [Static methods](#static-methods)
   - [`TzTime.reorder(d, d1 [, d2...])`](#tztime-reorder-d-d1-d2)
   - [`TzTime.parse(s, [format])`](#tztime-parse-s-format)
   - [`TzTime.fromJSON`](#tztime-fromjson)
 + [Settings](#settings)
   - [`TzTime.DAY_MS`](#tztime-day_ms)
   - [`TzTime.REGEXP_CHARS`](#tztime-regexp_chars)
   - [`TzTime.MONTHS`](#tztime-months)
   - [`TzTime.MNTH`](#tztime-mnth)
   - [`TzTime.DAYS`](#tztime-days)
   - [`TzTime.DY`](#tztime-dy)
   - [`TzTime.AM`](#tztime-am)
   - [`TzTime.PM`](#tztime-pm)
   - [`TzTime.WEEK_START`](#tztime-week_start)
   - [`TzTime.FORMAT_TOKENS`](#tztime-format_tokens)
   - [`TzTime.PARSE_RECIPES`](#tztime-parse_recipes)
   - [`TzTime.DEFAULT_FORMAT`](#tztime-default_format)
   - [`TzTime.JSON_FORMAT`](#tztime-json_format)
 + [`TzTime.utils`](#tztime-utils)
   - [`#repeat(s, count)`](#repeat-s-count)
   - [`#reverse(s)`](#reverse-s)
   - [`#pad(i, [digits, tail])`](#pad-i-digits-tail)
   - [`#cycle(i, max, [zeroIndex])`](#cycle-i-max-zeroindex)
   - [`#hour24(h, [pm])`](#hour24-h-pm)


## <a name="tztime">`TzTime`</a>

Crates a JavaScript Date object with enhanced API and time zone awareness.

Most of the native Date's API is retained. However, some time-zone-related
methods like `#getTimezoneOffset()` have been modified to support time zone
manipulation.

In general, you can assume that an undocumented method that exists in native
Date global works as expected.

    new TzTime();
    new TzTime(value);
    new TzTime(dateString);
    new TzTime(year, month, day [, hour, minute, second, millisecond]);


All constructor arguments are compliant with the standard JavaScript Date
constructor arguments. Please refer to [Date
/developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)
for more information.

There are a few non-standard forms added.

    new TimeZone(year, month, day, hour, minute, second, millsecond, tz);
    new TimeZone(dateObject);
    new TimeZone(tzTimeObject);


The `tz` argument is a time zone UTC offset in integer minutes (postive towards
East, and negative towards West).

The `dateObject` and `tzTimeObject` are Date and TzTime objects respectively.
Constructor will return a completely new instance of those objects and, in case
of TzTime objects, also retain the time zone offset.

The last argument is an integer offset from UTC in minutes (positive towards
East, negative towards West).

Unlike the JavaScript Date constructor, calling TzTime without the `new`
keyword has the same behavior as calling it with it.

## <a name="private-properties">Private properties</a>

There are a few private properties that are used in all TzTime method. Since
there aren't really any privacy in JavaScript, there is just a convention to
not touch these properties.

### <a name="tz">`#__tz__`</a>

Stores the currently set timezone offset. This property is used to calcualte
the correct UTC time. Please do not override this property.

To set the time zone use either `#timezone` attribute, or
`#setTimezoneOffset()` method.

### <a name="datetime">`#__datetime__`</a>

This is a reference to the underlaying Date object that is queried to return
all values necessary for TzTime object to function.

## <a name="attributes">Attributes</a>

The TzTime prototype provides a number of methods that can be used to
manipulate the objects with greater ease than with native Date methods. This is
particularly true when incrementing or decrementing values. For example:

    var d = new TzTime();
    d.setHours(d.getHours() + 20);
    d.hour += 12;


Most of the attributes are accessors that call methods to set or get the
values.

### <a name="timezone">`#timezone`</a>

The time zone offset in integer minutes from UTC.

Unlike the native `#getTimezoneOffset()` method, these values are calculated as
positive integers from UTC towards East, and negative towards West, as is usual
for time zones.

The `#getTimezoneOffset()` method retains the native behavior of giving the
offset in reverse, if you need to rely on such behavior.

The semantic of setting the time zone is changing just the time zone without
changing the local _time_. When setting the timezone, the local time of the
instance remains the same, while the UTC time of the instance is shifted.

### <a name="year">`#year`</a>

Full integer year in instance's time zone. The value is an integer.

### <a name="month">`#month`</a>

Month in instance's time zone. The value is an integer between 0 and 11 where 0
is January.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="date">`#date`</a>

Date in instance's time zone. The value is an integer between 1 and 31.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="day">`#day`</a>

Day of week in instance's time zone. The value is an integer between 0 and 6
where 0 is Sunday and 6 is Saturday.

This is a read-only attribute.

### <a name="hours">`#hours`</a>

Hours in 24-hour format in instance's time zone. The value is an integer
between 0 and 23.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="minutes">`#minutes`</a>

Minutes in instace's time zone. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="seconds">`#seconds`</a>

Seconds in instance's time zome. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="milliseconds">`#milliseconds`</a>

Milliseconds in instance's time zone. The value is an integer between 0 and
999.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="utcyear">`#utcYear`</a>

The full year with century in UTC time zone. The value is an integer.

### <a name="utcmonth">`#utcMonth`</a>

Month in UTC time zone. The value is an integer between 0 and 11 where 0 is
January.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="utcdate">`#utcDate`</a>

Date in UTC time zone. The value is an integer between 1 and 31.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="utcday">`#utcDay`</a>

Day of week in UTC time zone. The value is an integer between 0 and 6 where 0
is Sunday, and 6 is Saturday.

This is a read-only attribute.

### <a name="utchours">`#utcHours`</a>

Hours in UTC time zone. The value is an integer between 0 and 23.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="utcminutes">`#utcMinutes`</a>

Minutes in UTC time zone. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="utcseconds">`#utcSeconds`</a>

Seconds in UTC time zone. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

### <a name="utcmilliseconds">`#utcMilliseconds`</a>

Milliseconds in UTC time zone. The value is an integer between 0 and 999.

Setting values outside the rage will adjust other attributes accordingly.

## <a name="methods">Methods</a>

The methods of the TzTime prototype are specifically designed to address either
time-zone-awareness issues, or simply provide a somewhat better API over those
of the native Date objects. Methods that are not listed here, but are present
in the native Date object, behave the same way as in the native Date object.

One of the primary differences between the native methods and the ones
implemented in TzTime is the fact that setters all return the instance. This is
not the case with the native implementation.

The `UTC*` methods behave slightly differently under the hood because of
TzTime's time-zone-awareness, but should provide the same API and expected
behavior.

### <a name="gettimezoneoffset">`#getTimezoneOffset()`</a>

This method is different from the native implementation. It returns the actual
time zone set on the TzTime instance instead of the local time zone of the
platform. Like the native implementation, it returns the opposite of the actual
UTC offset in integer minutes.

### <a name="settimezoneoffset-v">`#setTimezoneOffset(v)`</a>

Sets the time zone using the reverse offset. This is a counterpart of
`#getTimezoneOffset()` that is missing in the native implementation. It is here
for the sake of compatibility with `#getTimezoneOffset()` but you are generally
recommended to use the `#timezone` attribute instead.

`v` should be a reverse offset from UTC in integer minutes.

### <a name="getfullyear">`#getFullYear()`</a>

Returns the full integer year with century in the instance's time zone.

### <a name="getmonth">`#getMonth()`</a>

Returns the 0-indexed integer month. 0 is January. The return value is in the
instance's time zone.

### <a name="getdate">`#getDate()`</a>

Returns the integer date (1-31) in the instance's time zone.

### <a name="getday">`#getDay()`</a>

Returns the integer day of week (0-6) in instace's time zone. 0 is Sunday, and
6 is Saturday.

### <a name="gethours">`#getHours()`</a>

Returns the 24-hour format hour (0-23) in the instance's time zone.

### <a name="getminutes">`#getMinutes()`</a>

Returns the minutes (0-59) in the instance's time zone.

### <a name="getseconds">`#getSeconds()`</a>

Returns the seconds (0-59) in the instance's time zone.

### <a name="getmilliseconds">`#getMilliseconds()`</a>

Returns the milliseconds (0-999) in the instance's time zone.

### <a name="setfullyear-year-month-date">`#setFullYear(year [, month, date])`</a>

Sets the year, and optionally month and date. The arguments are the same as for
the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setmonth-month-date">`#setMonth(month [, date])`</a>

Sets the month, and optionally date. The arguments are the same as for the
native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setdate-date">`#setDate(date)`</a>

Sets the date. The argument is the same as for the native Date prototype's
method.

The return value of this method is the TzTime object.

### <a name="sethours-hours-minutes-seconds-milliseconds">`#setHours(hours [, minutes, seconds, milliseconds])`</a>

Sets the hours, and optionally minutes, seconds and milliseconds if specified.
The argumetns are the same as for the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setminutes-minutes-seconds-milliseconds">`#setMinutes(minutes [, seconds, milliseconds])`</a>

Set the minutes and optionally seconds and milliseconds. The arguments are the
same as for the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setseconds-seconds-milliseconds">`#setSeconds(seconds [, milliseconds])`</a>

Set the seconds, and optionally milliseconds. The arguments are the same as for
the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setmilliseconds-milliseconds">`#setMilliseconds(milliseconds)`</a>

Sets the milliseconds. The argument is the same as for the native Date
prototype's method.

The return value of this method is the TzTime object.

### <a name="getutcfullyear">`#getUTCFullYear()`</a>

Returns the full integer year with century in UTC.

### <a name="getutcmonth">`#getUTCMonth()`</a>

Returns the 0-indexed integer month. 0 is January. The return value is in UTC.

### <a name="getutcdate">`#getUTCDate()`</a>

Returns the integer date (1-31) in UTC.

### <a name="getutcday">`#getUTCDay()`</a>

Returns the integer day of week (0-6) in instace's time zone. 0 is Sunday, and
6 is Saturday. Return value is in UTC.

### <a name="getutchours">`#getUTCHours()`</a>

Returns the 24-hour format hour (0-23) in UTC.

### <a name="getutcminutes">`#getUTCMinutes()`</a>

Returns the minutes (0-59) in UTC.

### <a name="getutcseconds">`#getUTCSeconds()`</a>

Returns the seconds (0-59) in UTC.

### <a name="getutcmilliseconds">`#getUTCMilliseconds()`</a>

Returns the milliseconds (0-999) in UTC.

### <a name="setutcfullyear-year-month-date">`#setUTCFullYear(year [, month, date])`</a>

Sets the year, and optionally month and date in UTC. The arguments are the same
as for the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setutcmonth-month-date">`#setUTCMonth(month [, date])`</a>

Sets the month, and optionally date in UTC. The arguments are the same as for
the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setutcdate-date">`#setUTCDate(date)`</a>

Sets the date in UTC. The argument is the same as for the native Date
prototype's method.

The return value of this method is the TzTime object.

### <a name="setutchours-hours-minutes-seconds-milliseconds">`#setUTCHours(hours [, minutes, seconds, milliseconds])`</a>

Sets the hours, and optionally minutes, seconds and milliseconds if specified
in UTC. The argumetns are the same as for the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setutcminutes-minutes-seconds-milliseconds">`#setUTCMinutes(minutes [, seconds, milliseconds])`</a>

Set the minutes and optionally seconds and milliseconds in UTC. The arguments
are the same as for the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setutcseconds-seconds-milliseconds">`#setUTCSeconds(seconds [, milliseconds])`</a>

Set the seconds, and optionally milliseconds in UTC. The arguments are the same
as for the native Date prototype's method.

The return value of this method is the TzTime object.

### <a name="setutcmilliseconds-milliseconds">`#setUTCMilliseconds(milliseconds)`</a>

Sets the milliseconds in UTC. The argument is the same as for the native Date
prototype's method.

The return value of this method is the TzTime object.

### <a name="todatestring">`#toDateString()`</a>

Returns the date portion as human-readable string.

### <a name="toisostring">`#toISOString()`</a>

Returns the date and time in ISO 8601 extended format.

### <a name="tojson">`#toJSON()`</a>

Same as `#toISOString`.

### <a name="tolocaledatestring">`#toLocaleDateString()`</a>

Returns the date portion in locale-specific format.

### <a name="tolocalestring">`#toLocaleString()`</a>

Returns the date and time in local-specific format.

### <a name="tolocaletimestring">`#toLocaleTimeString()`</a>

Returns the time portion in locale-specific format.

### <a name="tostring">`#toString()`</a>

Returns the string representation of the date and time object. Note that this
string usually includes a time zone. However, the time zone has nothing to do
with the timezone associated with the instance (it is always in the local time
zone of the platform).

### <a name="totimestring">`#toTimeString()`</a>

Returns the time portion of the string returned by `#toString()`. Note that the
time zone returned by this method has nothing to do with the timezone
associated with the instance (it is always in the local time zone of the
platform).

### <a name="toutcstring">`#toUTCString()`</a>

Returns a human-friendly representation of the date and time in GMT.

### <a name="valueof">`#valueOf()`</a>

Returns the base value of the instance in milliseconds since Unix epoch.
(Essentially the same as `#getTime()`).

### <a name="gettime">`#getTime()`</a>

Returns the number of milliseconds since Unix epoch.

### <a name="settime-milliseconds">`#setTime(milliseconds)`</a>

Sets the number of milliseconds since Unix epoch.

### <a name="toformat-format">`#toFormat([format])`</a>

Formats date and time using `format` formatting string. The formatting uses
strftime-compatible syntax with follwing tokens:

 + %a - Short week day name (e.g. 'Sun', 'Mon'...)
 + %A - Long week day name (e.g., 'Sunday', 'Monday'...)
 + %b - Short month name (e.g., 'Jan', 'Feb'...)
 + %B - Full month name (e.g., 'January', 'February'...)
 + %c - Locale-formatted date and time (platform-dependent)
 + %d - Zero-padded date (e.g, 02, 31...)
 + %D - Non-zero-padded date (e.g., 2, 31...)
 + %f - Zero-padded decimal seconds (e.g., 04.23, 23.50)
 + %F - Zero-padded decimal seconds with 3-digit fraction (e.g., 04.233)
 + %H - Zero-padded hour in 24-hour format (e.g., 8, 13, 0...)
 + %i - Non-zero-padded hour in 12-hour format (e.g., 8, 1, 12...)
 + %I - Zero-padded hour in 12-hour format (e.g., 08, 01, 12...)
 + %j - Zero-padded day of year (e.g., 002, 145, 364...)
 + %m - Zero-padded month (e.g., 01, 02...)
 + %M - Zero-padded minutes (e.g., 01, 12, 59...)
 + %n - Non-zero-padded month (e.g., 1, 2...)
 + %N - Non-zero-padded minutes (e.g., 1, 12, 59)
 + %p - AM/PM (a.m. and p.m.)
 + %s - Non-zero-padded seconds (e.g., 1, 2, 50...)
 + %S - Zero-padded seconds (e.g., 01, 02, 50...)
 + %r - Milliseconds (e.g., 1, 24, 500...)
 + %w - Numeric week day where 0 is Sunday (e.g., 0, 1...)
 + %y - Zero-padded year without the century part (e.g., 01, 13, 99...)
 + %Y - Full year (e.g., 2001, 2013, 2099...)
 + %z - Timezone in +HHMM or -HHMM format (e.g., +0200, -0530)
 + %x - Locale-formatted date (platform dependent)
 + %X - Locale-formatted time (platform dependent)
 + %% - Literal percent character %


Because of the formatting token usage, you may safely mix non-date strings in
the formatting string. For example:

    var t = new TzTime();
    t.toFormat('On %b %d at %i:%M %p');


If `format` string is omitted, `TzTime.DEFAULT_FORMAT` setting is used.

### <a name="strftime-format">`#strftime([format])`</a>

Alias for `#toFormat()` method.

### <a name="resettime">`#resetTime()`</a>

Resets the time portion of the object to 0:00:00.000.

### <a name="isafter-t">`#isAfter(t)`</a>

Whether object is after `t`. `t` can be either anohter `TzTime` or a `Date`
object.

Note that if `t` is equal to this object, it is considered to not be after it.

### <a name="isbefore-t">`#isBefore(t)`</a>

Whether object is before `t`. `t` can be either another `TzTime` or a `Date`
object.

Note that if `t` is equal to this object, it is considered to not be before it.

### <a name="isbetween-t1-t2">`#isBetween(t1, t2)`</a>

Whther object is between `t1` and `t2`. `t1` and `t2` can be either `TzTime` or
`Date` objects.

Note that if `t1` or `t2` is equal to this object, this object is not
considered to be between `t1` and `t2`.

The order of `t1` and `t2` does not matter.

### <a name="isdateafter-t">`#isDateAfter(t)`</a>

Whether this object is after `t` by date. `t` can be either another `TzTime` or
`Date` object.

### <a name="isdatebefore-t">`#isDateBefore(t)`</a>

Whether this object is before `t` by date. `t` can be either another `TzTime`
or `Date` object.

### <a name="isdatebetween-t1-t2">`#isDateBetween(t1, t2)`</a>

Whether this object is between `t1` and `t2` by date. The two arguments can
either be `TzTime` or `Date` objects.

Note that if `t1` or `t2` equals this object, this object is not considered to
be between them.

The order of `t1` and `t2` does not matter.

### <a name="delta-t">`#delta(t)`</a>

Calculates the difference between this instance and `t`, another `TzTime`
objects or a `Date` object and returns a delta object. The delta object has the
following structure:

    d.delta // relative difference
    d.milliseconds // difference in milliseconds (same as delta)
    d.seconds // difference rounded to seconds with no decimals
    d.minutes // difference rounded to minutes with no decimals
    d.hours // difference rounded to hours with no decimals
    d.days // difference rounded to days with no decimals
    d.composite // composite difference


Relative difference means the difference between this object and `t` relative
to this object. This can be a negative or positive number in milliseconds. All
other values (including the `milliseconds` key) are absolute, which means they
are always positive.

The composite difference is an array containing the total difference broken
down into days, hours, minutes, seconds, and milliseconds.

## <a name="static-properties">Static properties</a>

### <a name="tztime-platformzone">`TzTime.platformZone`</a>

Gets the time zone offset of the platform. This is a read-only attribute.

## <a name="static-methods">Static methods</a>

### <a name="tztime-reorder-d-d1-d2">`TzTime.reorder(d, d1 [, d2...])`</a>

Reorders the `TzTime` or `Date` objects from earliest to latest. The return
value is an array.

### <a name="tztime-parse-s-format">`TzTime.parse(s, [format])`</a>

Parse a string `s` and return a `Date` object. The `format` string is used to
specify the format in which `s` date is represented.

A subset of `#toFormat()` tokens is used in parsing.

 + %b - Short month name (e.g., 'Jan', 'Feb'...)
 + %B - Full month name (e.g., 'January', 'February'...)
 + %d - Zero-padded date (e.g, 02, 31...)
 + %D - Non-zero-padded date (e.g., 2, 31...)
 + %f - Zero-padded decimal seconds (e.g., 04.23, 23.50)
 + %F - Zero-padded decimal seconds with 3-digit fraction (e.g., 04.233)
 + %H - Zero-padded hour in 24-hour format (e.g., 8, 13, 0...)
 + %i - Non-zero-padded hour in 12-hour format (e.g., 8, 1, 12...)
 + %I - Zero-padded hour in 12-hour format (e.g., 08, 01, 12...)
 + %m - Zero-padded month (e.g., 01, 02...)
 + %M - Zero-padded minutes (e.g., 01, 12, 59...)
 + %n - Non-zero-padded month (e.g., 1, 2...)
 + %N - Non-zero-padded minutes (e.g., 1, 12, 59)
 + %p - AM/PM (a.m. and p.m.)
 + %s - Non-zero-padded seconds (e.g., 1, 2, 50...)
 + %S - Zero-padded seconds (e.g., 01, 02, 50...)
 + %r - Milliseconds (e.g., 1, 24, 500...)
 + %y - Zero-padded year without the century part (e.g., 01, 13, 99...)
 + %Y - Full year (e.g., 2001, 2013, 2099...)
 + %z - Time zone in +HHMM or -HHMM format or 'Z' (e.g., +1000, -0200)


The `%z` token behaves slightly differently when parsing date and time strings.
In addition to formats that strftime outputs, it also supports 'Z', which
allows parsing of ISO timestamps.

If `format` string is omitted, it will default to `TzTime.DEFAULT_FORMAT`.

Get the token regexp and parser function ### `TzTime.strptime(s, [format])`

Alias for `TzTime.parse()` method.

### <a name="tztime-fromjson">`TzTime.fromJSON`</a>

Parses the string using the `TzTime.JSON_FORMAT` format string.

Because `JSON.parse` returns a string when parsing a valid JSON timestamp, we
need to convert the string to a date by parsing the string. `TzTime.fromJSON()`
is a shortcut for performing this task by using a prset format string and
wrapping `TzTime.parse()`

## <a name="settings">Settings</a>

### <a name="tztime-day_ms">`TzTime.DAY_MS`</a>

Number of milliseconds in a day

### <a name="tztime-regexp_chars">`TzTime.REGEXP_CHARS`</a>

Array of regexp characters that should be escaped in a format string when
parsing dates and times.

### <a name="tztime-months">`TzTime.MONTHS`</a>

Month names

### <a name="tztime-mnth">`TzTime.MNTH`</a>

Short month names (three-letter abbreviations).

### <a name="tztime-days">`TzTime.DAYS`</a>

Week day names, starting with Sunday.

### <a name="tztime-dy">`TzTime.DY`</a>

Abbreviated week day names.

### <a name="tztime-am">`TzTime.AM`</a>

Ante-meridiem shorthand

### <a name="tztime-pm">`TzTime.PM`</a>

Post-meridiem shorthand

### <a name="tztime-week_start">`TzTime.WEEK_START`</a>

Day the week starts on. 0 is Sunday, 1 is Monday, and so on.

### <a name="tztime-format_tokens">`TzTime.FORMAT_TOKENS`</a>

Definitions of formatting tokens used by the `#strftime()` method. All format
functions are applied to a `Date` object so the `Date` methods can be called on
`this`.

### <a name="tztime-parse_recipes">`TzTime.PARSE_RECIPES`</a>

Functions for parsing the date.

Each parser recipe corresponds to a format token. The recipe will return a
piece of regexp that will match the token within the string, and a function
that will convert the match.

The converter function will take the matched string, and a meta object. The
meta object is later used as source of information for building the final
`Date` object.

### <a name="tztime-default_format">`TzTime.DEFAULT_FORMAT`</a>

The default format string for formatting and parsing functions. Default is
'%Y-%m-%dT%H:%M:%f%z'.

### <a name="tztime-json_format">`TzTime.JSON_FORMAT`</a>

This formatting string is used to parse the date using the `TzTime.fromJSON()`
method. Default value is '%Y-%m-%dT%H:%M:%F%z'.

## <a name="tztime-utils">`TzTime.utils`</a>

Utility functions for micro-formatting.

The `TzTime.utils` contains a few utility methods that are used to perform
formatting and calculation tasks, mainly used by `strptime` and `strftime`
functions.

### <a name="repeat-s-count">`#repeat(s, count)`</a>

Repeat string `s` `count` times.

### <a name="reverse-s">`#reverse(s)`</a>

Reverses a string.

### <a name="pad-i-digits-tail">`#pad(i, [digits, tail])`</a>

Zero-pads a number `i`.

`digits` argument specifies the total number of digits. If omitted, it will
default to 3 for no particular reason. :)

If `tail` argument is specified, the number will be considered a float, and
will zero-padded from the tail as well. The `tail` should be the number of
fractional digits after the dot.

Tail is `false` by default. If you pass it a 0, it will floor the number
instead of not tailing, by removing the fractional part.

Example:

    datetime.utils.pad(12, 4);
    // returns '0012'


    datetime.utils.pad(2.3, 5);
    // 002.3


    datetime.utils.pad(2.3, 5, 0);
    // 00002


    datetime.utils.pad(2.3, 2, 2);
    // 02.30


### <a name="cycle-i-max-zeroindex">`#cycle(i, max, [zeroIndex])`</a>

Keeps the number `i` within the `max` range. The range starts at 0 if
`zeroIndex` is `true` or 1 if `zeroIndex` is `false` (default).

Example:

    TzTime.utils.cycle(4, 12);
    // Returns 4


    TzTime.utils.cycle(13, 12);
    // Returns 1


    TzTime.utils.cycle(13, 12, true);
    // Returns 1


    TzTime.utils.cycle(12, 12, true);
    // Returns 0


    TzTime.utils.cycle(12, 12, false);
    // Returns 12


### <a name="hour24-h-pm">`#hour24(h, [pm])`</a>

Converts the `h` hour into 24-hour format. The `pm` is `true` if the hour is
PM. The `pm` argument defaults to `false`.