# TzTime <a name="tztime"></a>

This is a drop-in replacement for JavaScript's native Date constructor which
adds many useful and arguably saner API enhancements, and makes it
time-zone-aware.

 + [`TzTime`](#tztime)
   - [Constructor](#constructor)
   - [`#__timezone__` (private property)](#timezone__-private-property)
   - [`#__date__` (private property)](#date__-private-property)
   - [Attributes](#attributes)
     + [`#timezone`](#timezone)
     + [`#year`](#year)
     + [`#month`](#month)
     + [`#date`](#date)
     + [`#day`](#day)
     + [`#hours`](#hours)
     + [`#minutes`](#minutes)
     + [`#seconds`](#seconds)
     + [`#milliseconds'](#milliseconds)
     + [`#utcYear'](#utcyear)
     + [`#utcMonth`](#utcmonth)
     + [`#utcDate`](#utcdate)
     + [`#utcDay`](#utcday)
     + [`#utcHours`](#utchours)
     + [`#utcMinutes`](#utcminutes)
     + [`#utcSeconds`](#utcseconds)
     + [`#utcMilliseconds`](#utcmilliseconds)
   - [Methods](#methods)
     + [`#getTimezoneOffset()`](#gettimezoneoffset)
     + [`#setTimezoneOffset(v)`](#settimezoneoffset-v)
     + [`#getFullYear()`](#getfullyear)
     + [`#getMonth()`](#getmonth)
     + [`#getDate()`](#getdate)
     + [`#getDay()`](#getday)
     + [`#getHours()`](#gethours)
     + [`#getMinutes()`](#getminutes)
     + [`#getSeconds()`](#getseconds)
     + [`#getMilliseconds()`](#getmilliseconds)
     + [`#setFullYear(year [, month, date])`](#setfullyear-year-month-date)
     + [`#setMonth(month [, date])`](#setmonth-month-date)
     + [`#setDate(date)`](#setdate-date)
     + [`#setHours(hours [, minutes, seconds, milliseconds])`](#sethours-hours-minutes-seconds-milliseconds)
     + [`#setMinutes(minutes [, seconds, milliseconds])`](#setminutes-minutes-seconds-milliseconds)
     + [`#setSeconds(seconds [, milliseconds])](#setseconds-seconds-milliseconds)
     + [`#setMilliseconds(milliseconds)`](#setmilliseconds-milliseconds)
   - [`TzTime.platformZone'](#tztime-platformzone)
   - [`TzTime.utils`](#tztime-utils)
   - [`TzTime.utils.repeat(s, count)`](#tztime-utils-repeat-s-count)
   - [`TzTime.utils.reverse(s)`](#tztime-utils-reverse-s)
   - [`TzTime.utils.pad(i, [digits, tail])`](#tztime-utils-pad-i-digits-tail)
   - [`TzTime.utils.cycle(i, max, [zeroIndex])`](#tztime-utils-cycle-i-max-zeroindex)
   - [`TzTime.utils.hour24(h, [pm])`](#tztime-utils-hour24-h-pm)


## `TzTime` <a name="tztime"></a>

Crates a JavaScript Date object with enhanced API and time zone awareness.

Most of the native Date's API is retained. However, some time-zone-related
methods like `#getTimezoneOffset()` have been modified to support time zone
manipulation.

In general, you can assume that an undocumented method that exists in native
Date global works as expected.

### Constructor <a name="constructor"></a>

    new TzTime();
    new TzTime(value);
    new TzTime(dateString);
    new TzTime(year, month, day [, hour, minute, second, millisecond]);


All constructor arguments are compliant with the standard JavaScript Date
constructor arguments. Please refer to [Date
/developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)
for more information.

There are a few non-standard forms added.

    new TimeZone(year, month, day, hour, minute, second, millsecond, tz);
    new TimeZone(dateObject);
    new TimeZone(tzTimeObject);


The `tz` argument is a time zone UTC offset in integer minutes (postive towards
East, and negative towards West).

The `dateObject` and `tzTimeObject` are Date and TzTime objects respectively.
Constructor will return a completely new instance of those objects and, in case
of TzTime objects, also retain the time zone offset.

The last argument is an integer offset from UTC in minutes (positive towards
East, negative towards West).

Unlike the JavaScript Date constructor, calling TzTime without the `new`
keyword has the same behavior as calling it with it.

### `#__timezone__` (private property) <a name="timezone__-private-property"></a>

This property is a private property that stores the currently set timezone
offset. This property is used to calcualte the correct UTC time. Please do not
override this property.

To set the time zone use either `#timezone` attribute, or
`#setTimezoneOffset()` method.

### `#__date__` (private property) <a name="date__-private-property"></a>

This is a reference to the underlaying Date object that is queried to return
all values necessary for TzTime object to function.

TzTime constructor inherits from the native Date prototype.

### Attributes <a name="attributes"></a>

The TzTime prototype provides a number of methods that can be used to
manipulate the objects with greater ease than with native Date methods. This is
particularly true when incrementing or decrementing values. For example:

    var d = new TzTime();
    d.setHours(d.getHours() + 20);
    d.hour += 12;


Most of the attributes are accessors that call methods to set or get the
values.

#### `#timezone` <a name="timezone"></a>

The time zone offset in integer minutes from UTC.

Unlike the native `#getTimezoneOffset()` method, these values are calculated as
positive integers from UTC towards East, and negative towards West, as is usual
for time zones.

The `#getTimezoneOffset()` method retains the native behavior of giving the
offset in reverse, if you need to rely on such behavior.

The semantic of setting the time zone is changing just the time zone without
changing the local _time_. When setting the timezone, the local time of the
instance remains the same, while the UTC time of the instance is shifted.

#### `#year` <a name="year"></a>

Full integer year in instance's time zone. The value is an integer.

#### `#month` <a name="month"></a>

Month in instance's time zone. The value is an integer between 0 and 11 where 0
is January.

Setting values outside the rage will adjust other attributes accordingly.

#### `#date` <a name="date"></a>

Date in instance's time zone. The value is an integer between 1 and 31.

Setting values outside the rage will adjust other attributes accordingly.

#### `#day` <a name="day"></a>

Day of week in instance's time zone. The value is an integer between 0 and 6
where 0 is Sunday and 6 is Saturday.

This is a read-only attribute.

#### `#hours` <a name="hours"></a>

Hours in 24-hour format in instance's time zone. The value is an integer
between 0 and 23.

Setting values outside the rage will adjust other attributes accordingly.

#### `#minutes` <a name="minutes"></a>

Minutes in instace's time zone. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

#### `#seconds` <a name="seconds"></a>

Seconds in instance's time zome. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

#### `#milliseconds' <a name="milliseconds"></a>

Milliseconds in instance's time zone. The value is an integer between 0 and
999.

Setting values outside the rage will adjust other attributes accordingly.

#### `#utcYear' <a name="utcyear"></a>

The full year with century in UTC time zone. The value is an integer.

#### `#utcMonth` <a name="utcmonth"></a>

Month in UTC time zone. The value is an integer between 0 and 11 where 0 is
January.

Setting values outside the rage will adjust other attributes accordingly.

#### `#utcDate` <a name="utcdate"></a>

Date in UTC time zone. The value is an integer between 1 and 31.

Setting values outside the rage will adjust other attributes accordingly.

#### `#utcDay` <a name="utcday"></a>

Day of week in UTC time zone. The value is an integer between 0 and 6 where 0
is Sunday, and 6 is Saturday.

This is a read-only attribute.

#### `#utcHours` <a name="utchours"></a>

Hours in UTC time zone. The value is an integer between 0 and 23.

Setting values outside the rage will adjust other attributes accordingly.

#### `#utcMinutes` <a name="utcminutes"></a>

Minutes in UTC time zone. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

#### `#utcSeconds` <a name="utcseconds"></a>

Seconds in UTC time zone. The value is an integer between 0 and 59.

Setting values outside the rage will adjust other attributes accordingly.

#### `#utcMilliseconds` <a name="utcmilliseconds"></a>

Milliseconds in UTC time zone. The value is an integer between 0 and 999.

Setting values outside the rage will adjust other attributes accordingly.

### Methods <a name="methods"></a>

The methods of the TzTime prototype are specifically designed to address either
time-zone-awareness issues, or simply provide a somewhat better API over those
of the native Date objects. Methods that are not listed here, but are present
in the native Date object, behave the same way as in the native Date object.

One of the primary differences between the native methods and the ones
implemented in TzTime is the fact that setters all return the instance. This is
not the case with the native implementation.

The `UTC*` methods behave slightly differently under the hood because of
TzTime's time-zone-awareness, but should provide the same API and expected
behavior.

#### `#getTimezoneOffset()` <a name="gettimezoneoffset"></a>

This method is different from the native implementation. It returns the actual
time zone set on the TzTime instance instead of the local time zone of the
platform. Like the native implementation, it returns the opposite of the actual
UTC offset in integer minutes.

#### `#setTimezoneOffset(v)` <a name="settimezoneoffset-v"></a>

Sets the time zone using the reverse offset. This is a counterpart of
`#getTimezoneOffset()` that is missing in the native implementation. It is here
for the sake of compatibility with `#getTimezoneOffset()` but you are generally
recommended to use the `#timezone` attribute instead.

`v` should be a reverse offset from UTC in integer minutes.

#### `#getFullYear()` <a name="getfullyear"></a>

Returns the full integer year with century in the instance's time zone.

#### `#getMonth()` <a name="getmonth"></a>

Returns the 0-indexed integer month. 0 is January. The return value is in the
instance's time zone.

#### `#getDate()` <a name="getdate"></a>

Returns the integer date (1-31) in the instance's time zone.

#### `#getDay()` <a name="getday"></a>

Returns the integer day of week (0-6) in instace's time zone. 0 is Sunday, and
6 is Saturday.

#### `#getHours()` <a name="gethours"></a>

Returns the 24-hour format hour (0-23) in the instance's time zone.

#### `#getMinutes()` <a name="getminutes"></a>

Returns the minutes (0-59) in the instance's time zone.

#### `#getSeconds()` <a name="getseconds"></a>

Returns the seconds (0-59) in the instance's time zone.

#### `#getMilliseconds()` <a name="getmilliseconds"></a>

Returns the milliseconds (0-999) in the instance's time zone.

#### `#setFullYear(year [, month, date])` <a name="setfullyear-year-month-date"></a>

Sets the year, and optionally month and date. The arguments are the same as for
the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setMonth(month [, date])` <a name="setmonth-month-date"></a>

Sets the month, and optionally date. The arguments are the same as for the
native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setDate(date)` <a name="setdate-date"></a>

Sets the date. The argument is the same as for the native Date prototype's
method.

The return value of this method is the TzTime object.

#### `#setHours(hours [, minutes, seconds, milliseconds])` <a name="sethours-hours-minutes-seconds-milliseconds"></a>

Sets the hours, and optionally minutes, seconds and milliseconds if specified.
The argumetns are the same as for the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setMinutes(minutes [, seconds, milliseconds])` <a name="setminutes-minutes-seconds-milliseconds"></a>

Set the minutes and optionally seconds and milliseconds. The arguments are the
same as for the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setSeconds(seconds [, milliseconds]) <a name="setseconds-seconds-milliseconds"></a>

Set the seconds, and optionally milliseconds. The arguments are the same as for
the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setMilliseconds(milliseconds)` <a name="setmilliseconds-milliseconds"></a>

Sets the milliseconds. The argument is the same as for the native Date
prototype's method.

The return value of this method is the TzTime object.

### `TzTime.platformZone' <a name="tztime-platformzone"></a>

Gets the time zone offset of the platform. This is a read-only attribute.

### `TzTime.utils` <a name="tztime-utils"></a>

Utility functions for micro-formatting.

The `TzTime.utils` contains a few utility methods that are used to perform
formatting and calculation tasks, mainly used by `strptime` and `strftime`
functions.

### `TzTime.utils.repeat(s, count)` <a name="tztime-utils-repeat-s-count"></a>

Repeat string `s` `count` times.

### `TzTime.utils.reverse(s)` <a name="tztime-utils-reverse-s"></a>

Reverses a string.

### `TzTime.utils.pad(i, [digits, tail])` <a name="tztime-utils-pad-i-digits-tail"></a>

Zero-pads a number `i`.

`digits` argument specifies the total number of digits. If omitted, it will
default to 3 for no particular reason. :)

If `tail` argument is specified, the number will be considered a float, and
will zero-padded from the tail as well. The `tail` should be the number of
fractional digits after the dot.

Tail is `false` by default. If you pass it a 0, it will floor the number
instead of not tailing, by removing the fractional part.

Example:

    datetime.utils.pad(12, 4);
    // returns '0012'


    datetime.utils.pad(2.3, 5);
    // 002.3


    datetime.utils.pad(2.3, 5, 0);
    // 00002


    datetime.utils.pad(2.3, 2, 2);
    // 02.30


### `TzTime.utils.cycle(i, max, [zeroIndex])` <a name="tztime-utils-cycle-i-max-zeroindex"></a>

Keeps the number `i` within the `max` range. The range starts at 0 if
`zeroIndex` is `true` or 1 if `zeroIndex` is `false` (default).

Example:

    TzTime.utils.cycle(4, 12);
    // Returns 4


    TzTime.utils.cycle(13, 12);
    // Returns 1


    TzTime.utils.cycle(13, 12, true);
    // Returns 1


    TzTime.utils.cycle(12, 12, true);
    // Returns 0


    TzTime.utils.cycle(12, 12, false);
    // Returns 12


### `TzTime.utils.hour24(h, [pm])` <a name="tztime-utils-hour24-h-pm"></a>

Converts the `h` hour into 24-hour format. The `pm` is `true` if the hour is
PM. The `pm` argument defaults to `false`.