# TzTime <a name="tztime"></a>

This is a drop-in replacement for JavaScript's native Date constructor which
adds many useful and arguably saner API enhancements, and makes it
time-zone-aware.

 + [`TzTime`](#tztime)
   - [Constructor](#constructor)
   - [`#__timezone__` (private property)](#timezone__-private-property)
   - [Attributes](#attributes)
     + [`#timezone`](#timezone)
     + [`#year`](#year)
     + [`#month`](#month)
     + [`#date`](#date)
   - [Methods](#methods)
     + [`#getTimezoneOffset()`](#gettimezoneoffset)
     + [`#setTimezoneOffset(v)`](#settimezoneoffset-v)
     + [`#setFullYear(year [, month, date])`](#setfullyear-year-month-date)
     + [`#setMonth(month [, date])`](#setmonth-month-date)
     + [`#setDate(date)`](#setdate-date)
     + [`#setHours(hours [, minutes, seconds, milliseconds])`](#sethours-hours-minutes-seconds-milliseconds)
     + [`#setMinutes(minutes [, seconds, milliseconds])`](#setminutes-minutes-seconds-milliseconds)
     + [`#setSeconds(seconds [, milliseconds])](#setseconds-seconds-milliseconds)
     + [`#setMilliseconds(milliseconds)`](#setmilliseconds-milliseconds)


## `TzTime` <a name="tztime"></a>

Crates a JavaScript Date object with enhanced API and time zone awareness.

Most of the native Date's API is retained. However, some time-zone-related
methods like `#getTimezoneOffset()` have been modified to support time zone
manipulation.

In general, you can assume that an undocumented method that exists in native
Date global works as expected.

### Constructor <a name="constructor"></a>

    new TzTime();
    new TzTime(value);
    new TzTime(dateString);
    new TzTime(year, month, day [, hour, minute, second, millisecond]);


All constructor arguments are compliant with the standard JavaScript Date
constructor arguments. Please refer to [Date
/developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)
for more information.

One non-standard form is added:

    new TzTime(dateString, format)


The non-standard form will parse teh `dateString` using supplied `format`
string which is compatible with `strptime` formatting.

Unlike the JavaScript Date constructor, calling TzTime without the `new`
keyword has the same behavior as calling it with it.

### `#__timezone__` (private property) <a name="timezone__-private-property"></a>

This property is a private property that stores the currently set timezone
offset. This property is used to calcualte the correct UTC time. Please do not
override this property.

To set the time zone use either `#timezone` attribute, or
`#setTimezoneOffset()` method.

TzTime constructor inherits from the native Date prototype.

### Attributes <a name="attributes"></a>

The TzTime prototype provides a number of methods that can be used to
manipulate the objects with greater ease than with native Date methods. This is
particularly true when incrementing or decrementing values. For example:

    var d = new TzTime();
    d.setHours(d.getHours() + 20);
    d.hour += 12;


Most of the attributes are accessors that call methods to set or get the
values.

#### `#timezone` <a name="timezone"></a>

The time zone offset in integer minutes from UTC.

Unlike the native `#getTimezoneOffset()` method, these values are calculated as
positive integers from UTC towards East, and negative towards West, as is usual
for time zones.

The `#getTimezoneOffset()` method retains the native behavior of giving the
offset in reverse, if you need to rely on such behavior.

#### `#year` <a name="year"></a>

Full integer year.

#### `#month` <a name="month"></a>

Month. The value is 0-index where 0 is January.

#### `#date` <a name="date"></a>

Date. The value is an integer between 1 and 31.

### Methods <a name="methods"></a>

The methods of the TzTime prototype are specifically designed to address either
time-zone-awareness issues, or simply provide a somewhat better API over those
of the native Date objects. Methods that are not listed here, but are present
in the native Date object, behave the same way as in the native Date object.

One of the primary differences between the native methods and the ones
implemented in TzTime is the fact that setters all return the instance. This is
not the case with the native implementation.

The `UTC*` methods behave slightly differently under the hood because of
TzTime's time-zone-awareness, but should provide the same API and expected
behavior.

#### `#getTimezoneOffset()` <a name="gettimezoneoffset"></a>

This method is different from the native implementation. It returns the actual
time zone set on the TzTime instance instead of the local time zone of the
platform. Like the native implementation, it returns the opposite of the actual
UTC offset in integer minutes.

#### `#setTimezoneOffset(v)` <a name="settimezoneoffset-v"></a>

Sets the time zone using the reverse offset. This is a counterpart of
`#getTimezoneOffset()` that is missing in the native implementation. It is here
for the sake of compatibility with `#getTimezoneOffset()` but you are generally
recommended to use the `#timezone` attribute instead.

`v` should be a reverse offset from UTC in integer minutes.

#### `#setFullYear(year [, month, date])` <a name="setfullyear-year-month-date"></a>

Sets the year, and optionally month and date. The arguments are the same as for
the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setMonth(month [, date])` <a name="setmonth-month-date"></a>

Sets the month, and optionally date. The arguments are the same as for the
native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setDate(date)` <a name="setdate-date"></a>

Sets the date. The argument is the same as for the native Date prototype's
method.

The return value of this method is the TzTime object.

#### `#setHours(hours [, minutes, seconds, milliseconds])` <a name="sethours-hours-minutes-seconds-milliseconds"></a>

Sets the hours, and optionally minutes, seconds and milliseconds if specified.
The argumetns are the same as for the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setMinutes(minutes [, seconds, milliseconds])` <a name="setminutes-minutes-seconds-milliseconds"></a>

Set the minutes and optionally seconds and milliseconds. The arguments are the
same as for the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setSeconds(seconds [, milliseconds]) <a name="setseconds-seconds-milliseconds"></a>

Set the seconds, and optionally milliseconds. The arguments are the same as for
the native Date prototype's method.

The return value of this method is the TzTime object.

#### `#setMilliseconds(milliseconds)` <a name="setmilliseconds-milliseconds"></a>

Sets the milliseconds. The argument is the same as for the native Date
prototype's method.

The return value of this method is the TzTime object.