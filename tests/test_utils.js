// Generated by CoffeeScript 1.6.3
var TzTime, assert, chai, cycle, hour24, pad, repeat, reverse, root, _ref;

root = this;

if (typeof require !== "undefined" && require !== null) {
  chai = require('chai');
  TzTime = require('../tztime');
}

assert = chai.assert;

_ref = TzTime.utils, repeat = _ref.repeat, reverse = _ref.reverse, pad = _ref.pad, cycle = _ref.cycle, hour24 = _ref.hour24;

describe('TzTime.utils', function() {
  describe('#repeat()', function() {
    it('should repeat a string', function() {
      return assert.equal(repeat('#', 5), '#####');
    });
    it('should return an empty string if length is 0', function() {
      return assert.equal(repeat('#', 0), '');
    });
    return it('should return empty string if string arg is empty', function() {
      return assert.equal(repeat('', 5), '');
    });
  });
  describe('#reverse()', function() {
    return it('should reverse a string', function() {
      return assert.equal(reverse('esrever'), 'reverse');
    });
  });
  describe('#pad()', function() {
    it('should zero-pad a number', function() {
      return assert.equal(pad(12), '012');
    });
    it('should pad with number of digits specified', function() {
      return assert.equal(pad(12, 5), '00012');
    });
    it('should pad floats', function() {
      return assert.equal(pad(12.5, 5), '012.5');
    });
    it('should pad the decimal places if tail is specified', function() {
      return assert.equal(pad(12.5, 5, 2), '00012.50');
    });
    it('should simply omit decimals if tail is 0', function() {
      return assert.equal(pad(12.5, 5, 0), '00012');
    });
    it('should pad only the decimals if digits is 0', function() {
      return assert.equal(pad(12.5, 0, 2), '12.50');
    });
    return it('should truncate', function() {
      return assert.equal(pad(12.5112, 1, 1), '2.5');
    });
  });
  describe('#cycle()', function() {
    it('should wrap the number within a given range', function() {
      return assert.equal(cycle(18, 12), 6);
    });
    return it('should wrap with zero index if told to', function() {
      assert.equal(cycle(24, 12), 12);
      return assert.equal(cycle(24, 12, true), 0);
    });
  });
  return describe('#hour24', function() {
    return it('should convert 12-hour format hours to 24-hour format', function() {
      var i, _i, _j;
      for (i = _i = 1; _i <= 11; i = ++_i) {
        assert.equal(hour24(i), i);
      }
      assert.equal(hour24(12), 0, hour24(12));
      for (i = _j = 1; _j <= 11; i = ++_j) {
        assert.equal(hour24(i, true), i + 12);
      }
      return assert.equal(hour24(12, true), 12);
    });
  });
});
